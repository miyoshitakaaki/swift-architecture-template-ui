{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usage of Form and FormConfirm"}]},{"anchor":"Form","level":3,"type":"heading","text":"Form"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"create Form setting class conform to "},{"type":"codeVoice","code":"Form"},{"type":"text","text":"."}]}]}]},{"type":"codeListing","syntax":"swift","code":["class SampleForm: Form {","typealias NavContent = TitleNavigationContent","","struct Input: Initializable, Equatable, Validatable {","var title = \"\"","var body = \"\"","","var invalidTitle = \"\"","}","","var views: [UIView] {","self.titleEdit.titleLabel","FormSpacer(8)","self.titleEdit.edit","FormSpacer(8)","self.bodyEdit.titleLabel","FormSpacer(8)","self.bodyEdit.edit","FormSpacer(24)","}","","var title: String { \"サンプル\" }","","var completionButtonTitle: String { \"保存\" }","","var data: AnyPublisher<Input, Never> {","self.titleEdit",".combineLatest(self.bodyEdit)",".map { title, body in","var data = Input()","data.title = title","data.body = body","return data","}",".eraseToAnyPublisher()","}","","var fetch: () async -> Result<Input, AppError> {{ [weak self] in","guard let self else { return .success(.init()) }","","if self.isEdit {","let result = await Domain.Usecase.Sample.Get.shared().execute(userId: 1)","","switch result {","case let .success(entities):","let input = entities.first",".map { entity in","Input(title: entity.title, body: entity.body)","}","","guard let input else { return .success(.init()) }","","self.titleEdit.edit.text = input.title","self.bodyEdit.edit.text = input.body","","return .success(input)","case let .failure(error):","return .failure(error)","}","","} else {","return .success(.init())","}","","}}","","func complete(_ input: Input) async -> Result<Input, AppError> {","if self.isEdit {","let result = await Domain.Usecase.Sample.Update.shared().execute(","title: input.title,","body: input.body",")","","switch result {","case .success:","return .success(.init())","","case let .failure(error):","return .failure(error)","}","} else {","let result = await Domain.Usecase.Sample.Register.shared().execute(","title: input.title,","body: input.body",")","","switch result {","case .success:","return .success(.init())","","case let .failure(error):","return .failure(error)","}","}","}","","private let titleEdit: TextEdit<FormTextField> =","create(edit: .standard(title: \"タイトル\", placeholder: \"\"))","","private let bodyEdit: TextEdit<FormTextField> =","create(edit: .standard(title: \"本文\", placeholder: \"\"))","","let isEdit: Bool","","init(isEdit: Bool) {","self.isEdit = isEdit","}","}",""]},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"create(form:navContent:hideCompletionButton:)"},{"type":"text","text":" to create ViewController of form screen."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let form = SampleForm(isEdit: false)","let vc = create(form: form, navContent: .init())"]},{"anchor":"FormConfirm","level":3,"type":"heading","text":"FormConfirm"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"create FormConfirm setting class conform to "},{"type":"codeVoice","code":"FormConfirmProtocol"},{"type":"text","text":"."}]}]}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class SampleConfirm: FormConfirmUIProtocol, FormConfirmProtocol {","var data: SampleForm.Input","","var views: [UIView] {","[","FormSectionLabel(title: \"サンプル\", leftInset: 32),","FormTitleLabel(title: \"Title\", leftInset: 32),","FormConfirmLabel(title: self.data.title, leftInset: 32),","FormTitleLabel(title: \"Body\", leftInset: 32),","FormConfirmLabel(title: self.data.body, leftInset: 32),","FormSpacer(24),","]","}","","var title: String { \"サンプル確認\" }","","var completionButtonTitle: String { \"完了\" }","","init(data: SampleForm.Input) {","self.data = data","}","","var complete: () async -> Result<Empty, AppError> {{ [weak self] in","guard let self else { return .success(.init()) }","","let result = await Domain.Usecase.Sample.Register.shared().execute(","title: self.data.title,","body: self.data.body",")","","switch result {","case .success:","return .success(.init())","","case let .failure(error):","return .failure(error)","}","}}","}",""]},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"create(formConfirm:)"},{"type":"text","text":" to create ViewController of form confirm screen."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let confirm = SampleConfirm(data: .init(title: \"title\", body: \"body\"))","let vc = create(formConfirm: confirm)",""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/ui\/formusage"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/UI\/documentation\/UI\/FormUsage","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Usage of Form and FormConfirm"}],"kind":"article","metadata":{"roleHeading":"Article","title":"create Form and FormConfirm UI","role":"article","modules":[{"name":"UI"}]},"hierarchy":{"paths":[["doc:\/\/UI\/documentation\/UI"]]},"references":{"doc://UI/documentation/UI":{"role":"collection","title":"UI","abstract":[{"type":"text","text":"UI"}],"identifier":"doc:\/\/UI\/documentation\/UI","kind":"symbol","type":"topic","url":"\/documentation\/ui"}}}
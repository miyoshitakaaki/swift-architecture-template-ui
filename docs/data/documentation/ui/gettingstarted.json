{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"UI framework include UI components like grid, list, form, and so on."},{"type":"text","text":" "},{"type":"text","text":"This framework have constructor of each components."},{"type":"text","text":" "},{"type":"text","text":"This article introduced these usages."}]},{"anchor":"Components","level":2,"type":"heading","text":"Components"},{"anchor":"Collection","level":3,"type":"heading","text":"Collection"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"create CollectionList setting class conform to "},{"type":"codeVoice","code":"CollectionList"},{"type":"text","text":"."}]}]}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class SampleCollection: CollectionList {","    struct NavContent: NavigationContent {","        var title: String? = \"Sample\"","    }","","    typealias Cell = SampleListCollectionViewCell","    typealias Header = CollectionHeader","    typealias Footer = CollectionFooter","    typealias Items = [ListSection<Cell.ViewData, Header.ViewData, Footer.ViewData>]","","    var sectionLayout: (CGFloat) -> NSCollectionLayoutSection {{ _ in","        .create(","            isVertical: true,","            itemWidth: UIScreen.main.bounds.width - 32,","            itemHeight: .absolute(72)","        )","    }}","","    var fetch: ((parameter: String?, isAdditional: Bool)) async -> Result<Items, AppError> {{ [weak self] _ in","        guard let self else { return .success([]) }","","        let result = await Domain.Usecase.Sample.Get.shared().execute(userId: 1)","","        switch result {","        case let .success(entities):","            return .success(self.mapper(entities: [entities]))","","        case let .failure(error):","            return .failure(error)","        }","    }}","","    func mapper(entities: [[SampleEntity]]) -> Items {","        guard entities.first?.isEmpty == false else { return [] }","","        let items: [Cell.ViewData] = entities.first?.map { entity in","            .init(text: entity.title, imageUrl: entity.url)","        } ?? []","","        return [","            .init(","                section: .init(","                    header: .init(),","                    footer: .init()","                ),","                items: items","            ),","        ]","    }","}",""]},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"create(collection:content:needRefreshNotificationNames:)"},{"type":"text","text":" to create ViewController of collection screen."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let collection = SampleCollection()","let vc = create(collection: collection, content: .init())"]},{"anchor":"Table","level":3,"type":"heading","text":"Table"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"create Table setting class conform to "},{"type":"codeVoice","code":"Table"},{"type":"text","text":"."}]}]}]},{"type":"codeListing","syntax":"swift","code":["final class SampleTable: Table {","    typealias NavContent = TitleNavigationContent","    typealias Cell = SampleTableViewCell","    typealias Header = TableEmptyHeader","    typealias Footer = TableEmptyHeader","","    var fetch: ((parameter: String?, isAdditional: Bool)) async -> Result<Items, AppError> {{ [weak self] _ in","        guard let self else { return .success([]) }","","        let result = await Domain.Usecase.Sample.Get.shared().execute(userId: 1)","","        switch result {","            case let .success(entities):","                return .success(self.mapper(entities: [entities]))","","            case let .failure(error):","                return .failure(error)","        }","    }}","","    func mapper(entities: [[SampleEntity]]) -> Items {","        guard entities.first?.isEmpty == false else { return [] }","","        let items: [Cell.ViewData] = entities.first?.map { entity in","            .init(text: entity.title)","        } ?? []","","        return [","            .init(","                section: .init(","                    header: .init(),","                    footer: .init()","                ),","                items: items","            ),","        ]","    }","}",""]},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"create(table:content:needRefreshNotificationNames:)"},{"type":"text","text":" to create ViewController of table screen."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let table = SampleTable()","let vc = create(table: table, content: .init(title: \"サンプル\"))",""]},{"anchor":"Form","level":3,"type":"heading","text":"Form"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"create Form setting class conform to "},{"type":"codeVoice","code":"Form"},{"type":"text","text":"."}]}]}]},{"type":"codeListing","syntax":"swift","code":["class SampleForm: Form {","    typealias NavContent = TitleNavigationContent","","    struct Input: Initializable, Equatable, Validatable {","        var title = \"\"","        var body = \"\"","","        var invalidTitle = \"\"","    }","","    var views: [UIView] {","        self.titleEdit.titleLabel","        FormSpacer(8)","        self.titleEdit.edit","        FormSpacer(8)","        self.bodyEdit.titleLabel","        FormSpacer(8)","        self.bodyEdit.edit","        FormSpacer(24)","    }","","    var title: String { \"サンプル\" }","","    var completionButtonTitle: String { \"保存\" }","","    var data: AnyPublisher<Input, Never> {","        self.titleEdit","        .combineLatest(self.bodyEdit)","        .map { title, body in","            var data = Input()","            data.title = title","            data.body = body","            return data","        }","        .eraseToAnyPublisher()","    }","","    var fetch: () async -> Result<Input, AppError> {{ [weak self] in","        guard let self else { return .success(.init()) }","","        if self.isEdit {","            let result = await Domain.Usecase.Sample.Get.shared().execute(userId: 1)","","            switch result {","            case let .success(entities):","                let input = entities.first","                .map { entity in","                    Input(title: entity.title, body: entity.body)","                }","","                guard let input else { return .success(.init()) }","","                self.titleEdit.edit.text = input.title","                self.bodyEdit.edit.text = input.body","","                return .success(input)","            case let .failure(error):","                return .failure(error)","            }","","        } else {","            return .success(.init())","        }","","    }}","","    func complete(_ input: Input) async -> Result<Input, AppError> {","        if self.isEdit {","            let result = await Domain.Usecase.Sample.Update.shared().execute(","                title: input.title,","                body: input.body","            )","","            switch result {","                case .success:","                return .success(.init())","","                case let .failure(error):","                return .failure(error)","            }","        } else {","            let result = await Domain.Usecase.Sample.Register.shared().execute(","                title: input.title,","                body: input.body","            )","","            switch result {","                case .success:","                return .success(.init())","","                case let .failure(error):","                return .failure(error)","            }","        }","    }","","    private let titleEdit: TextEdit<FormTextField> =","        create(edit: .standard(title: \"タイトル\", placeholder: \"\"))","","    private let bodyEdit: TextEdit<FormTextField> =","        create(edit: .standard(title: \"本文\", placeholder: \"\"))","","    let isEdit: Bool","","    init(isEdit: Bool) {","        self.isEdit = isEdit","    }","}",""]},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"create(form:navContent:hideCompletionButton:)"},{"type":"text","text":" to create ViewController of form screen."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let form = SampleForm(isEdit: false)","let vc = create(form: form, navContent: .init())"]},{"anchor":"FormConfirm","level":3,"type":"heading","text":"FormConfirm"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"create FormConfirm setting class conform to "},{"type":"codeVoice","code":"FormConfirmProtocol"},{"type":"text","text":"."}]}]}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class SampleConfirm: FormConfirmUIProtocol, FormConfirmProtocol {","    var data: SampleForm.Input","","    var views: [UIView] {","        [","        FormSectionLabel(title: \"サンプル\", leftInset: 32),","        FormTitleLabel(title: \"Title\", leftInset: 32),","        FormConfirmLabel(title: self.data.title, leftInset: 32),","        FormTitleLabel(title: \"Body\", leftInset: 32),","        FormConfirmLabel(title: self.data.body, leftInset: 32),","        FormSpacer(24),","        ]","    }","","    var title: String { \"サンプル確認\" }","","    var completionButtonTitle: String { \"完了\" }","","    init(data: SampleForm.Input) {","        self.data = data","    }","","    var complete: () async -> Result<Empty, AppError> {{ [weak self] in","        guard let self else { return .success(.init()) }","","        let result = await Domain.Usecase.Sample.Register.shared().execute(","            title: self.data.title,","            body: self.data.body","        )","","        switch result {","        case .success:","            return .success(.init())","","        case let .failure(error):","            return .failure(error)","        }","    }}","}",""]},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"create(formConfirm:)"},{"type":"text","text":" to create ViewController of form confirm screen."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let confirm = SampleConfirm(data: .init(title: \"title\", body: \"body\"))","let vc = create(formConfirm: confirm)",""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/ui\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/UI\/documentation\/UI\/GettingStarted","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Usage of UI components including in UI framework"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting started with UI framework","role":"article","modules":[{"name":"UI"}]},"hierarchy":{"paths":[["doc:\/\/UI\/documentation\/UI"]]},"references":{"doc://UI/documentation/UI":{"role":"collection","title":"UI","abstract":[{"type":"text","text":"UI"}],"identifier":"doc:\/\/UI\/documentation\/UI","kind":"symbol","type":"topic","url":"\/documentation\/ui"}}}